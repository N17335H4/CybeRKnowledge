•	Hackers, Malicious users, Ethical hackers and Crackers (criminal hackers): white-hat, gray-hat, blue-hat(whom software developers invite to find security flaws in their systems) and black-hat.
Security auditing involves comparing a company’s security policies (or compliance requirements) with what’s actually taking place. The intent of security auditing	is to validate that security controls exist, typically by using a risk based approach. Auditing often involves reviewing business processes and in some cases isn’t very technical. Security audits, in fact, can be as basic as security checklists that simply serve to meet a specific compliance requirement.
Your overall goals for security testing are to:
•	Prioritize your systems so that you can focus your efforts on what matters.
•	Test your systems in a non-destructive fashion.
•	Enumerate vulnerabilities and if necessary, prove to management that business risks exist.
•	Apply results to address the vulnerabilities and better secure your systems.
Physical attacks can also include dumpster diving — rummaging through trash cans and bins for intellectual property, passwords, network diagrams and	other information.
Examples of network infrastructure attacks include the following:
•	Connecting to a	network through an unsecured	wireless access	point attached	behind	a firewall. 
•	Exploiting weaknesses in network protocols, such as File Transfer Protocol (FTP)	and Secure Sockets Layer (SSL). 
•	Flooding a network with too many requests, creating denial of service (DoS) for legitimate requests. 
•	Installing a network analyzer on a network segment and capturing every packet that travels across it, revealing confidential information in clear text.
Examples of attacks of OS:
•	Exploiting missing patches.
•	Attacking built-in authentication systems.
•	Breaking file system security.
•	Cracking passwords and weak encryption implementations.
DoS: denial of service. 
Crashing your system: Although	you’re not likely	 to do so, you can create DoS conditions	on your systems	 when testing. Running too many tests too quickly can cause system lockups, data corruption, reboots and	similar problems, especially when you’re testing	older servers and web applications. Don’t assume that	a network or specific host can handle the beating that network tools and vulnerability scanners can dish out. You can	even accidentally create an account or system lockout	by using vulnerability scanners or by socially engineering someone into changing a password without	realizing the consequences of your actions. Proceed with caution and common sense. Either way, be	it you or someone else,	these weaknesses still exist and	it’s better that you discover them first! Many vulnerability scanners can control how many tests are performed on	each system at the same time. These settings are especially handy when you need to run the tests on production systems during regular business	hours. Don’t be	afraid to throttle back your scans. Completing your testing will take	longer, but throttling back may save you a lot of	grief if an unstable system is present.
Vulnerability: it is a hole or a weakness in the application, which can be a design flaw or an implementation bug, that allows an attacker to cause harm to the application owner, application users and other entities that rely in the application.
Knowledge of the systems before testing: You don’t need extensive knowledge of the system you’re testing — just basic understanding, which protects both you and the tested systems. Understanding the systems you’re testing shouldn’t be difficult	if you’re testing	your own inhouse systems. If you’re testing a client’s systems, you may have	to dig deeper. In fact, only one or two clients have asked me for a fully blind assessment. Most IT managers and others who are responsible for security are scared of blind assessments, which can take more time, cost more, and be less effective. Base the type of test you	perform on the	organization’s or client’s needs.
Deliverables include vulnerability scanner reports and your own	distilled	report outlining	important vulnerabilities to address, along	with recommendations and countermeasures to implement.
•	To crack passwords, you need cracking tools such as Ophcrack and Proactive Password Auditor.
For an in-depth analysis of a web application, a web vulnerability scanner (such as Netsparker or Acunetix Web Vulnerability Scanner) is more appropriate than a	network analyzer (such as Wireshark or Omnipeek).
Some testing tools:
•	Acunetix Web Vulnerability Scanner 
•	Cain & Abel 
•	CommView for WiFi 
•	Elcomsoft System Recovery 
•	Metasploit 
•	Nessus 
•	NetScanTools Pro 
•	Netsparker 
•	Nexpose 
•	Omnipeek 
•	SoftPerfect Network Scanner
Chore: If possible, encrypt any emails and files that contain sensitive test information or share them via a cloud-based file sharing service.
Steps:
•	Search the Internet for your organization’s name, its computer and network system names, and its IP addresses. Google is a	great place to start.
•	Narrow	your scope, targeting the specific systems you’re testing. Whether you’re assessing physical security structures or web applications, a casual assessment can turn up a lot of information about your systems.
•	Further	narrow your focus by performing scans and other detailed tests	to uncover vulnerabilities on your systems. 
•	Perform the attacks and exploit	any vulnerabilities you find (if that’s what you choose to do).
